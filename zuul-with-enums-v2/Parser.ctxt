#BlueJ class context
comment0.target=Parser
comment0.text=\r\n\ This\ class\ is\ part\ of\ the\ "World\ of\ Zuul"\ application.\ \r\n\ "World\ of\ Zuul"\ is\ a\ very\ simple,\ text\ based\ adventure\ game.\ \ \r\n\ \r\n\ This\ parser\ reads\ user\ input\ and\ tries\ to\ interpret\ it\ as\ an\ "Adventure"\r\n\ command.\ Every\ time\ it\ is\ called\ it\ reads\ a\ line\ from\ the\ terminal\ and\r\n\ tries\ to\ interpret\ the\ line\ as\ a\ two-word\ command.\ It\ returns\ the\ command\r\n\ as\ an\ object\ of\ class\ Command.\r\n\r\n\ The\ parser\ has\ a\ set\ of\ known\ command\ words.\ It\ checks\ user\ input\ against\r\n\ the\ known\ commands,\ and\ if\ the\ input\ is\ not\ one\ of\ the\ known\ commands,\ it\r\n\ returns\ a\ command\ object\ that\ is\ marked\ as\ an\ unknown\ command.\r\n\ \r\n\ @author\ \ Michael\ K\u00F6lling\ and\ David\ J.\ Barnes\r\n\ @version\ 2016.02.29\r\n
comment1.params=
comment1.target=Parser()
comment1.text=\r\n\ Create\ a\ parser\ to\ read\ from\ the\ terminal\ window.\r\n
comment2.params=input
comment2.target=Command\ getCommand(java.lang.String)
comment2.text=\r\n\ \ \ \ public\ Command\ getCommand()\ \r\n\ \ \ \ {\r\n\ \ \ \ \ \ \ \ String\ inputLine;\ \ \ //\ will\ hold\ the\ full\ input\ line\r\n\ \ \ \ \ \ \ \ String\ word1\ \=\ "";\r\n\ \ \ \ \ \ \ \ String\ word2\ \=\ "";\r\n\ \ \ \ \ \ \ \ System.out.println(word1);\r\n\ \ \ \ \ \ \ \ /*\r\n\ \ \ \ \ \ \ \ System.out.print(">\ ");\ \ \ \ \ //\ print\ prompt\r\n\r\n\ \ \ \ \ \ \ \ inputLine\ \=\ reader.nextLine();\r\n\r\n\ \ \ \ \ \ \ \ //\ Find\ up\ to\ two\ words\ on\ the\ line.\r\n\ \ \ \ \ \ \ \ Scanner\ tokenizer\ \=\ new\ Scanner(inputLine);\r\n\ \ \ \ \ \ \ \ if(tokenizer.hasNext())\ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ word1\ \=\ tokenizer.next();\ \ \ \ \ \ //\ get\ first\ word\r\n\ \ \ \ \ \ \ \ \ \ \ \ if(tokenizer.hasNext())\ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ word2\ \=\ tokenizer.next();\ \ \ \ \ \ //\ get\ second\ word\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ //\ note\:\ we\ just\ ignore\ the\ rest\ of\ the\ input\ line.\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ }\r\n\r\n\ \ \ \ \ \ \ \ return\ new\ Command(commands.getCommandWord(word1),\ word2);\r\n\ \ \ \ }\r\n
comment3.params=
comment3.target=java.lang.String\ showCommands()
comment3.text=\r\n\ Print\ out\ a\ list\ of\ valid\ command\ words.\r\n
numComments=4
