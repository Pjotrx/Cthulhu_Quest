#BlueJ class context
comment0.target=Parser
comment0.text=\n\ This\ class\ is\ part\ of\ the\ "World\ of\ Zuul"\ application.\ \n\ "World\ of\ Zuul"\ is\ a\ very\ simple,\ text\ based\ adventure\ game.\ \ \n\ \n\ This\ parser\ reads\ user\ input\ and\ tries\ to\ interpret\ it\ as\ an\ "Adventure"\n\ command.\ Every\ time\ it\ is\ called\ it\ reads\ a\ line\ from\ the\ terminal\ and\n\ tries\ to\ interpret\ the\ line\ as\ a\ two-word\ command.\ It\ returns\ the\ command\n\ as\ an\ object\ of\ class\ Command.\n\n\ The\ parser\ has\ a\ set\ of\ known\ command\ words.\ It\ checks\ user\ input\ against\n\ the\ known\ commands,\ and\ if\ the\ input\ is\ not\ one\ of\ the\ known\ commands,\ it\n\ returns\ a\ command\ object\ that\ is\ marked\ as\ an\ unknown\ command.\n\ \n\ @author\ \ Michael\ K\u00F6lling\ and\ David\ J.\ Barnes\n\ @version\ 2016.02.29\n
comment1.params=
comment1.target=Parser()
comment1.text=\n\ Create\ a\ parser\ to\ read\ from\ the\ terminal\ window.\n
comment2.params=input
comment2.target=Command\ getCommand(java.lang.String)
comment2.text=\n\ \ \ \ public\ Command\ getCommand()\ \n\ \ \ \ {\n\ \ \ \ \ \ \ \ String\ inputLine;\ \ \ //\ will\ hold\ the\ full\ input\ line\n\ \ \ \ \ \ \ \ String\ word1\ \=\ "";\n\ \ \ \ \ \ \ \ String\ word2\ \=\ "";\n\ \ \ \ \ \ \ \ System.out.println(word1);\n\ \ \ \ \ \ \ \ /*\n\ \ \ \ \ \ \ \ System.out.print(">\ ");\ \ \ \ \ //\ print\ prompt\n\n\ \ \ \ \ \ \ \ inputLine\ \=\ reader.nextLine();\n\n\ \ \ \ \ \ \ \ //\ Find\ up\ to\ two\ words\ on\ the\ line.\n\ \ \ \ \ \ \ \ Scanner\ tokenizer\ \=\ new\ Scanner(inputLine);\n\ \ \ \ \ \ \ \ if(tokenizer.hasNext())\ {\n\ \ \ \ \ \ \ \ \ \ \ \ word1\ \=\ tokenizer.next();\ \ \ \ \ \ //\ get\ first\ word\n\ \ \ \ \ \ \ \ \ \ \ \ if(tokenizer.hasNext())\ {\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ word2\ \=\ tokenizer.next();\ \ \ \ \ \ //\ get\ second\ word\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ //\ note\:\ we\ just\ ignore\ the\ rest\ of\ the\ input\ line.\n\ \ \ \ \ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ }\n\n\ \ \ \ \ \ \ \ return\ new\ Command(commands.getCommandWord(word1),\ word2);\n\ \ \ \ }\n
comment3.params=
comment3.target=java.lang.String\ showCommands()
comment3.text=\n\ Print\ out\ a\ list\ of\ valid\ command\ words.\n
numComments=4
